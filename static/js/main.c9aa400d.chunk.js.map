{"version":3,"sources":["UriTemplater.js","App.js","serviceWorker.js","index.js"],"names":["UriTemplater","props","handleTemplateChange","event","setState","uriTemplate","uriTemplates","target","value","editorState","EditorState","set","state","decorator","CompositeDecorator","strategy","matchesTemplateStrategy","component","MatchesTemplateComponent","contentBlock","callback","contentState","template","text","getText","trimEnd","test","strict","length","createEmpty","onChange","Grid","container","direction","justify","alignItems","spacing","item","TextField","this","className","variant","size","fullWidth","placeholder","Box","border","borderColor","p","React","Component","style","backgroundColor","data-offset-key","offsetKey","children","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gYASaA,EAAb,kDAGI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAgCVC,qBAAuB,SAACC,GACpB,EAAKC,SAAS,CAACC,YAAaC,IAAaH,EAAMI,OAAOC,SAAS,WAG3D,EAAKJ,SAAS,CACVK,YAAaC,cAAYC,IAAI,EAAKC,MAAMH,YAAa,CAAEI,UAAW,IAAIC,qBAAmB,CACjF,CACIC,SAAU,EAAKC,wBACfC,UAAWC,aAzChB,EAiDnBF,wBAA0B,SAACG,EAAcC,EAAUC,GAC/C,IAAIC,EAAW,EAAKV,MAAMP,YACtBkB,EAAOJ,EAAaK,UAAUC,UAE9BH,EAASI,KAAKH,EAAM,CAACI,QAAQ,KAC7BP,EAAS,EAAGG,EAAKK,SApDrB,EAAKhB,MAAQ,CAACP,YAAaC,IAAa,IAAKG,YAAaC,cAAYmB,eACtE,EAAKC,SAAW,SAAArB,GAAW,OAAI,EAAKL,SAAS,CAACK,iBAH/B,EAHvB,qDAUQ,OACQ,kBAACsB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAW,SAAUC,QAAS,SAAUC,WAAY,UAAWC,QAAS,GACpF,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACC,EAAA,EAAD,CACIR,SAAUS,KAAKrC,qBACfsC,UAAW,gBACXC,QAAS,WACTC,KAAM,QACNC,WAAW,EACXC,YAAa,2BAGrB,kBAACb,EAAA,EAAD,CAAMM,MAAI,GACN,kBAACQ,EAAA,EAAD,CAAKC,OAAQ,EAAGC,YAAa,WAAYC,EAAG,GAC5C,kBAAC,SAAD,CACIR,UAAW,sBACXI,YAAa,8BACbnC,YAAa8B,KAAK3B,MAAMH,YACxBqB,SAAUS,KAAKT,kBA5B3C,GAAkCmB,IAAMC,WAgElChC,E,uKAEE,OACI,0BAAMiC,MAAO,CAACC,gBAAiB,WAAYC,kBAAiBd,KAAKtC,MAAMqD,WAClEf,KAAKtC,MAAMsD,c,GAJWN,IAAMC,W,SCzD9BM,MAXf,WACE,OACE,yBAAKhB,UAAU,OACX,kBAACiB,EAAA,EAAD,CAAWC,SAAU,MACjB,iDACA,kBAAC,EAAD,SCEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9aa400d.chunk.js","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport './UriTemplater.css'\nimport {CompositeDecorator, Editor, EditorState} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport uriTemplates from 'uri-templates';\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\n\nexport class UriTemplater extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {uriTemplate: uriTemplates(''), editorState: EditorState.createEmpty()}\n        this.onChange = editorState => this.setState({editorState})\n    }\n\n    render() {\n        return (\n                <Grid container direction={\"column\"} justify={\"center\"} alignItems={\"stretch\"} spacing={2}>\n                    <Grid item>\n                        <TextField\n                            onChange={this.handleTemplateChange}\n                            className={\"TemplateInput\"}\n                            variant={\"outlined\"}\n                            size={\"small\"}\n                            fullWidth={true}\n                            placeholder={\"/my/{uri}/?{template}\"}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <Box border={1} borderColor={\"grey.500\"} p={1}>\n                        <Editor\n                            className={\"UriTemplater-editor\"}\n                            placeholder={\"Enter test URLs per line...\"}\n                            editorState={this.state.editorState}\n                            onChange={this.onChange}\n                        />\n                        </Box>\n                    </Grid>\n                </Grid>\n        )\n    }\n\n    handleTemplateChange = (event) => {\n        this.setState({uriTemplate: uriTemplates(event.target.value)}, () => {\n            // Please forgive me, I have no idea how to react. We need to use the state in the matchesTemplateStrategy\n            // which comes from the state we set on the uriTemplate\n            this.setState({\n                editorState: EditorState.set(this.state.editorState, { decorator: new CompositeDecorator([\n                        {\n                            strategy: this.matchesTemplateStrategy,\n                            component: MatchesTemplateComponent\n                        }\n                    ])\n                } )})\n\n        });\n    };\n\n    matchesTemplateStrategy = (contentBlock, callback, contentState) => {\n        let template = this.state.uriTemplate;\n        let text = contentBlock.getText().trimEnd();\n\n        if (template.test(text, {strict: true})) {\n            callback(0, text.length);\n        }\n    }\n\n\n}\n\nclass MatchesTemplateComponent extends React.Component {\n    render() {\n        return (\n            <span style={{backgroundColor: \"#e1ffdc\"}} data-offset-key={this.props.offsetKey}>\n                {this.props.children}\n            </span>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport {UriTemplater} from \"./UriTemplater\";\nimport Container from \"@material-ui/core/Container\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Container maxWidth={\"md\"}>\n            <h3>URI Templates.net</h3>\n            <UriTemplater />\n        </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}